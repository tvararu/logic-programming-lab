fmod LIST-INT2 is
  protecting INT .
  sorts NList List .
  subsort Int < NList < List .
  op nil : -> List .
  op _ _ : Int List -> NList [id: nil] .
  
  op _in_ : Int NList -> Bool .
  op append : List List -> List .
  op rev : List -> List .
  
  op lower : Int List -> List .
  op upper : Int List -> List .
  op srt : List -> List .
  
  var I J : Int .
  var L K : List .
  
  eq I in nil = false .
  eq I in J L = (I == J) or (I in L) .
  
  eq append(nil, L) = L .
  eq append(I L, K) = I append(L, K) .
  
  eq rev(nil) = nil .
  eq rev(I L) = append(rev(L), I) .
  
  eq lower(I, nil) = nil .
  ceq lower(I, J L) = J lower(I, L) if (J <= I) .
  ceq lower(I, J L) = lower(I, L) if (J > I) .
  
  eq upper(I, nil) = nil .
  ceq upper(I, J L) = J upper(I, L) if (J > I) .
  ceq upper(I, J L) = upper(I, L) if (J <= I) .
  
  eq srt(nil) = nil .
  eq srt(I L) = append(srt(lower(I, L)), I srt(upper(I, L))) .
endfm

fmod TREE is
  protecting INT .
  protecting LIST-INT2 .
  sort Tree .
  op empty : -> Tree .
  op _ _ _ : Tree Int Tree -> Tree .
  
  op search : Int Tree -> Bool .
  op depth : Tree -> Int .
  
  op SRD : Tree -> List .
  op RSD : Tree -> List .
  op SDR : Tree -> List .
  
  op bt-insert : NList Tree -> Tree .
  op btsort : NList -> NList .
  
  var I J K : Int .
  var T U V : Tree .
  var L : List .
  
  eq search(I, empty) = false .
  eq search(I, U J V) = (I == J) or search(I, U) or search(I, V) .
  
  eq depth(empty) = 0 .
  eq depth(U I V) = 1 + max(depth(U), depth(V)) .
  
  eq SRD(empty) = nil .
  eq SRD(U I V) = append(SRD(U), I SRD(V)) .
  
  eq RSD(empty) = nil .
  eq RSD(U I V) = append(I RSD(U), RSD(V)) .
  
  eq SDR(empty) = nil .
  eq SDR(U I V) = append(append(SDR(U), SDR(V)), I) .
  
  eq bt-insert(I L, empty) = bt-insert(L, empty I empty) .
  eq bt-insert(nil, U) = U .
  ceq bt-insert(I L, U J V) = bt-insert(L, (U J bt-insert(I, V))) if (I > J) .
  ceq bt-insert(I L, U J V) = bt-insert(L, (bt-insert(I, U) J V)) if (I <= J) .
  
  eq btsort(L) = SRD(bt-insert(L, empty)) .
endfm

--- fmod MIRROR is
---   protecting TREE .
---   op mirror : Tree -> Tree .
---   vars L R : Tree . var I : Int .
---   eq mirror(empty) = empty .
---   eq mirror(L I R) = mirror(R) I mirror(L) .
--- endfm
